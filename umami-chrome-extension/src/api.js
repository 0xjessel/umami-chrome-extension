export class UmamiAPI{constructor(){this.baseUrl="",this.token="",this.websiteId="",this.username="",this.password=""}async init(){if(!this.baseUrl||!this.websiteId)throw new Error("Missing required configuration. Please check extension settings.");if(!this.token||!await this.verifyAuth()){if(!this.username||!this.password)throw new Error("Missing credentials for self-hosted server.");await this.authenticate()}}async authenticate(){try{const t=await fetch(`${this.baseUrl}/api/auth/login`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({username:this.username,password:this.password})});if(!t.ok)throw new Error("Authentication failed. Please check your credentials.");const e=await t.json();this.token=e.token}catch(t){throw t}}async makeRequest(t,e={},s={}){const i=t.startsWith("/api/")?t:`/api/${t.startsWith("/")?t.slice(1):t}`,r=new URL(`${this.baseUrl}${i}`);Object.entries(e).forEach((([t,e])=>{r.searchParams.append(t,e.toString())}));try{const i={Authorization:`Bearer ${this.token}`,Accept:"application/json",...s.headers},a=await fetch(r,{...s,headers:i});if(!a.ok){if(401===a.status)return await this.authenticate(),this.makeRequest(t,e,s);throw new Error(`API request failed: ${a.statusText}`)}return await a.json()}catch(t){throw t}}async getActiveUsers(){const t=`/api/websites/${this.websiteId}/active`,e=await this.makeRequest(t);try{if("number"==typeof e)return e;if("string"==typeof e&&!isNaN(Number(e)))return Number(e);if(e&&"object"==typeof e&&"visitors"in e){const t=e.visitors;if("number"==typeof t)return t;if("string"==typeof t&&!isNaN(Number(t)))return Number(t)}if(e&&"object"==typeof e&&"x"in e){const t=e.x;if("number"==typeof t)return t;if("string"==typeof t&&!isNaN(Number(t)))return Number(t)}if(e&&"object"==typeof e)for(const t in e){const s=e[t];if("number"==typeof s)return s;if("string"==typeof s&&!isNaN(Number(s)))return Number(s)}return 0}catch(t){return 0}}async getDailyStats(){const t=new Date,e=new Date(t.toLocaleDateString());return await this.makeRequest(`/api/websites/${this.websiteId}/stats`,{startAt:e.getTime(),endAt:t.getTime()})}async verifyAuth(){try{return await this.makeRequest("/api/auth/verify"),!0}catch{return!1}}}